/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.54.1-1d9808a7-20220817-143039
 */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import {
  Authenticator,
  BaseService,
  getAuthenticatorFromEnvironment,
  validateParams,
  UserOptions,
} from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API Version: 1.1.2
 */

class PartnerCenterSellV1 extends BaseService {
  static DEFAULT_SERVICE_URL: string = 'https://product-lifecycle.api.cloud.ibm.com/openapi/v1';

  static DEFAULT_SERVICE_NAME: string = 'partner_center_sell';

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of PartnerCenterSellV1 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {PartnerCenterSellV1}
   */

  public static newInstance(options: UserOptions): PartnerCenterSellV1 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new PartnerCenterSellV1(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }

  /**
   * Construct a PartnerCenterSellV1 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {PartnerCenterSellV1}
   */
  constructor(options: UserOptions) {
    options = options || {};

    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(PartnerCenterSellV1.DEFAULT_SERVICE_URL);
    }
  }

  /*************************
   * products
   ************************/

  /**
   * List products.
   *
   * List all available products that are onboarded to Partner Center Sell.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListProductsResponse>>}
   */
  public listProducts(
    params?: PartnerCenterSellV1.ListProductsParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListProductsResponse>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listProducts'
    );

    const parameters = {
      options: {
        url: '/products',
        method: 'GET',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create product.
   *
   * Start to onboard a new product to Partner Center Sell.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productName - The name of the product that you are onboarding. This name is displayed to
   * users when you publish your product in the catalog.
   * @param {string} params.taxAssessment - The tax assessment for your product.
   * @param {string} params.productType - The type of the product that you want to onboard to IBM Cloud.
   * @param {boolean} [params.materialAgreement] - The confirmation that your company is authorized to use all
   * materials.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public createProduct(
    params: PartnerCenterSellV1.CreateProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productName', 'taxAssessment', 'productType'];
    const _validParams = [
      'productName',
      'taxAssessment',
      'productType',
      'materialAgreement',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'productName': _params.productName,
      'taxAssessment': _params.taxAssessment,
      'productType': _params.productType,
      'materialAgreement': _params.materialAgreement,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createProduct'
    );

    const parameters = {
      options: {
        url: '/products',
        method: 'POST',
        body,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get product details.
   *
   * Retrieve available details of a product. Details include contact information, product type, and private catalog ID.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public getProduct(
    params: PartnerCenterSellV1.GetProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'getProduct');

    const parameters = {
      options: {
        url: '/products/{productId}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update product details.
   *
   * Update a product's name, tax assessment, and material agreement.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {boolean} [params.materialAgreement] - The confirmation that your company is authorized to use all
   * materials.
   * @param {string} [params.productName] - The name of the product that you are onboarding. This name is displayed to
   * users when you publish your product in the catalog.
   * @param {string} [params.taxAssessment] - The tax assessment for your product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public updateProduct(
    params: PartnerCenterSellV1.UpdateProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = [
      'productId',
      'materialAgreement',
      'productName',
      'taxAssessment',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'materialAgreement': _params.materialAgreement,
      'productName': _params.productName,
      'taxAssessment': _params.taxAssessment,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateProduct'
    );

    const parameters = {
      options: {
        url: '/products/{productId}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a draft product.
   *
   * Delete a product that is not published to the IBM Cloud catalog or shared with other accounts. To remove a
   * published or shared product from your account, you must first deprecate the product.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<boolean>>}
   */
  public deleteProduct(
    params: PartnerCenterSellV1.DeleteProductParams
  ): Promise<PartnerCenterSellV1.Response<boolean>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deleteProduct'
    );

    const parameters = {
      options: {
        url: '/products/{productId}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Publish an approved product.
   *
   * To publish a product to the IBM Cloud catalog, you must submit for approval. After you receive approval, you can
   * publish to the catalog.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public publishProduct(
    params: PartnerCenterSellV1.PublishProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'publishProduct'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/publish',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Suspend a published product.
   *
   * You can remove a product from the IBM Cloud catalog without permanently deleting or deprecating it for up to 7
   * days. You might want to suspend a product if you discover a bug or vulnerability that must be investigated and
   * fixed.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.reason - The reason why you want to suspend your published product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public suspendProduct(
    params: PartnerCenterSellV1.SuspendProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'reason'];
    const _validParams = ['productId', 'reason', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'reason': _params.reason,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'suspendProduct'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/suspend',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Deprecate a published product.
   *
   * If you need to permanently delete your product or a version from the IBM Cloud catalog, deprecate it first. Your
   * product remains available for use during a 90-day deprecation period, and is removed after 90 days.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.reason - The reason why you want to deprecate your published product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public deprecateProduct(
    params: PartnerCenterSellV1.DeprecateProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'reason'];
    const _validParams = ['productId', 'reason', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'reason': _params.reason,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'deprecateProduct'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/deprecate',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Restore a deprecated product.
   *
   * If your product is deprecated, you have 90 days to restore it to keep it in the catalog.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.reason - The reason why you want to restore your deprecated product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public restoreProduct(
    params: PartnerCenterSellV1.RestoreProductParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'reason'];
    const _validParams = ['productId', 'reason', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'reason': _params.reason,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'restoreProduct'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/restore',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List badges.
   *
   * List all available badges a product can be validated against.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CloudBadge>>}
   */
  public listBadges(
    params?: PartnerCenterSellV1.ListBadgesParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CloudBadge>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'listBadges');

    const parameters = {
      options: {
        url: '/products/badges',
        method: 'GET',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get badge.
   *
   * Get a badge by id.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.badgeId - The unique ID of the badge. This ID can be obtained by calling the list badges
   * method.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CloudBadge>>}
   */
  public getBadge(
    params: PartnerCenterSellV1.GetBadgeParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CloudBadge>> {
    const _params = { ...params };
    const _requiredParams = ['badgeId'];
    const _validParams = ['badgeId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'badgeId': _params.badgeId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'getBadge');

    const parameters = {
      options: {
        url: '/products/badges/{badgeId}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * catalog
   ************************/

  /**
   * View a product's catalog data.
   *
   * View the catalog entry details and other data that is stored for your product.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CatalogListingDetails>>}
   */
  public getCatalog(
    params: PartnerCenterSellV1.GetCatalogParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CatalogListingDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'getCatalog');

    const parameters = {
      options: {
        url: '/products/{productId}/catalog',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update a product's catalog data.
   *
   * Update the catalog entry details and other data that is stored for your product.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} [params.catalogId] - The ID of the private catalog where your products are created.
   * @param {string} [params.description] - The description of the product.
   * @param {string} [params.iconUrl] - The URL for your company or product logo.
   * @param {string[]} [params.keywords] - The key search terms that are associated with your product.
   * @param {string} [params.pricingModel] - The pricing model for your product.
   * @param {string} [params.category] - A list of values that are used to categorize products in the catalog. By using
   * the Catalogs management CLI plug-in, run the `ibmcloud catalog offering category-options` CLI command to list all
   * possible values.
   * @param {string[]} [params.providerType] -
   * @param {string} [params.label] - The name of the product.
   * @param {string} [params.name] - The name of the product.
   * @param {string} [params.provider] - The name of your company.
   * @param {string[]} [params.tags] - The keywords and phrases that are associated with your product.
   * @param {string} [params.documentationUrl] - The link to the warranted product documentation.
   * @param {HighlightSectionInput[]} [params.highlights] - The attributes of the product that differentiate it in the
   * market.
   * @param {string} [params.longDescription] - The description about the details of the product. You can use markdown
   * syntax to provide this description.
   * @param {MediaSectionInput[]} [params.media] - The images or videos that show off the product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CatalogListingDetails>>}
   */
  public updateCatalog(
    params: PartnerCenterSellV1.UpdateCatalogParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CatalogListingDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = [
      'productId',
      'catalogId',
      'description',
      'iconUrl',
      'keywords',
      'pricingModel',
      'category',
      'providerType',
      'label',
      'name',
      'provider',
      'tags',
      'documentationUrl',
      'highlights',
      'longDescription',
      'media',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'catalogId': _params.catalogId,
      'description': _params.description,
      'iconUrl': _params.iconUrl,
      'keywords': _params.keywords,
      'pricingModel': _params.pricingModel,
      'category': _params.category,
      'providerType': _params.providerType,
      'label': _params.label,
      'name': _params.name,
      'provider': _params.provider,
      'tags': _params.tags,
      'documentationUrl': _params.documentationUrl,
      'highlights': _params.highlights,
      'longDescription': _params.longDescription,
      'media': _params.media,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateCatalog'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/catalog',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Request a catalog listing approval.
   *
   * If a catalog listing was not approved for publishing during the initial product approval process, you can request
   * approval again.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>>}
   */
  public requestCatalogApproval(
    params: PartnerCenterSellV1.RequestCatalogApprovalParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'requestCatalogApproval'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/catalog/approvals',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * pricing
   ************************/

  /**
   * List pricing plans that are connected to a product.
   *
   * List pricing plans that are connected to a product.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListPlansResponse>>}
   */
  public listPlans(
    params: PartnerCenterSellV1.ListPlansParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListPlansResponse>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'listPlans');

    const parameters = {
      options: {
        url: '/products/{productId}/plans',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create a pricing plan.
   *
   * Define how you want to charge users for your product. If you aren't sure how you want charge users, you can start
   * by using a free plan.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.description - The description of the pricing model.
   * @param {string} params.label - The name of the pricing plan.
   * @param {string} params.type - The type of the pricing plan.
   * @param {string} params.url - The URL to where your customers can purchase the license that is required to use your
   * product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CreatePlanResponse>>}
   */
  public createPlan(
    params: PartnerCenterSellV1.CreatePlanParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CreatePlanResponse>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'description', 'label', 'type', 'url'];
    const _validParams = ['productId', 'description', 'label', 'type', 'url', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'description': _params.description,
      'label': _params.label,
      'type': _params.type,
      'url': _params.url,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'createPlan');

    const parameters = {
      options: {
        url: '/products/{productId}/plans',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get pricing plan by ID.
   *
   * Use the pricing plan ID to retrieve its details.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.pricingPlanId - The resource ID of the pricing plan. This ID can be obtained by listing
   * pricing plans.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.License>>}
   */
  public getPlan(
    params: PartnerCenterSellV1.GetPlanParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.License>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'pricingPlanId'];
    const _validParams = ['productId', 'pricingPlanId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
      'pricingPlanId': _params.pricingPlanId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'getPlan');

    const parameters = {
      options: {
        url: '/products/{productId}/plans/{pricingPlanId}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update a pricing plan.
   *
   * If you need to change details of a pricing plan, such as the name, description, URL, or type, you can update the
   * pricing plan. After your changes are submitted for a published product, the changes are displayed in the catalog.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.pricingPlanId - The resource ID of the pricing plan. This ID can be obtained by listing
   * pricing plans.
   * @param {string} params.description - The description of the pricing model.
   * @param {string} params.label - The name of the pricing plan.
   * @param {string} params.type - The type of the pricing plan.
   * @param {string} params.url - The URL to where your customers can purchase the license that is required to use your
   * product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CreatePlanResponse>>}
   */
  public updatePlan(
    params: PartnerCenterSellV1.UpdatePlanParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CreatePlanResponse>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'pricingPlanId', 'description', 'label', 'type', 'url'];
    const _validParams = [
      'productId',
      'pricingPlanId',
      'description',
      'label',
      'type',
      'url',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'description': _params.description,
      'label': _params.label,
      'type': _params.type,
      'url': _params.url,
    };

    const path = {
      'productId': _params.productId,
      'pricingPlanId': _params.pricingPlanId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'updatePlan');

    const parameters = {
      options: {
        url: '/products/{productId}/plans/{pricingPlanId}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a pricing plan.
   *
   * If you need to remove a pricing plan for a product, you can delete it.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.pricingPlanId - The resource ID of the pricing plan. This ID can be obtained by listing
   * pricing plans.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CreatePlanResponse>>}
   */
  public deletePlan(
    params: PartnerCenterSellV1.DeletePlanParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.CreatePlanResponse>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'pricingPlanId'];
    const _validParams = ['productId', 'pricingPlanId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
      'pricingPlanId': _params.pricingPlanId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'deletePlan');

    const parameters = {
      options: {
        url: '/products/{productId}/plans/{pricingPlanId}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * support
   ************************/

  /**
   * Get product support details.
   *
   * View the product support details, including the contacts and the escalation process.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Support>>}
   */
  public getSupport(
    params: PartnerCenterSellV1.GetSupportParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Support>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(PartnerCenterSellV1.DEFAULT_SERVICE_NAME, 'v1', 'getSupport');

    const parameters = {
      options: {
        url: '/products/{productId}/support',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update product support details.
   *
   * Update the product support details, including the contacts and the escalation process.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {EscalationContactsUpdate[]} [params.escalationContacts] - The direct contact for IBM Cloud Support leaders
   * to communicate with the support leader of your product. This contact information is not displayed on the product
   * detail page in the catalog.
   * @param {string[]} [params.locations] - The locations where support is provided from.
   * @param {SupportDetails[]} [params.supportDetails] - Provide details about the available options for getting
   * support. The details that you provide are displayed on your product details page in the catalog.
   * @param {SupportEscalation} [params.supportEscalation] - The details about your support escalation process. The
   * details that you provide are displayed on your product details page in the catalog.
   * @param {string} [params.supportType] - The provider type for support of your product.
   * @param {string} [params.url] - The support site URL where users can go to get help, answer their questions, or ask
   * experts and the community for help.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Support>>}
   */
  public updateSupport(
    params: PartnerCenterSellV1.UpdateSupportParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Support>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = [
      'productId',
      'escalationContacts',
      'locations',
      'supportDetails',
      'supportEscalation',
      'supportType',
      'url',
      'headers',
    ];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'escalationContacts': _params.escalationContacts,
      'locations': _params.locations,
      'support_details': _params.supportDetails,
      'support_escalation': _params.supportEscalation,
      'support_type': _params.supportType,
      'url': _params.url,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateSupport'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all change requests related to a given product.
   *
   * List all change requests related to a given product.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListSupportChangeRequestsResponse>>}
   */
  public listSupportChangeRequests(
    params: PartnerCenterSellV1.ListSupportChangeRequestsParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListSupportChangeRequestsResponse>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listSupportChangeRequests'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update support data of an already approved or published product.
   *
   * To update the support data of an already approved or published product, your changes will be required to be
   * reviewed and approved. To do updates on a published product, you have to open a change request, add your changes to
   * it, then request a review for your changes. Once the changes are approved, you can merge these updates to your
   * published product.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {Support} params.change - Provide details about how customers can get help when they are using your product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public createSupportChangeRequest(
    params: PartnerCenterSellV1.CreateSupportChangeRequestParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'change'];
    const _validParams = ['productId', 'change', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'change': _params.change,
    };

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'createSupportChangeRequest'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes',
        method: 'POST',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get a change request related to a given product by id.
   *
   * Get a change request related to a given product by id.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.changeRequestId - The resource ID of the change request. This ID can be obtained by getting
   * the offering and finding the current change request on it.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ChangeRequest>>}
   */
  public getSupportChangeRequest(
    params: PartnerCenterSellV1.GetSupportChangeRequestParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ChangeRequest>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'changeRequestId'];
    const _validParams = ['productId', 'changeRequestId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
      'changeRequestId': _params.changeRequestId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'getSupportChangeRequest'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes/{changeRequestId}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update an already created change request.
   *
   * Update a change request that was created earlier.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.changeRequestId - The resource ID of the change request. This ID can be obtained by getting
   * the offering and finding the current change request on it.
   * @param {Support} params.change - Provide details about how customers can get help when they are using your product.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public updateSupportChangeRequest(
    params: PartnerCenterSellV1.UpdateSupportChangeRequestParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'changeRequestId', 'change'];
    const _validParams = ['productId', 'changeRequestId', 'change', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = {
      'change': _params.change,
    };

    const path = {
      'productId': _params.productId,
      'changeRequestId': _params.changeRequestId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'updateSupportChangeRequest'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes/{changeRequestId}',
        method: 'PATCH',
        body,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List review events related to a change request.
   *
   * List review events related to a change request.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.changeRequestId - The resource ID of the change request. This ID can be obtained by getting
   * the offering and finding the current change request on it.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>>}
   */
  public listSupportChangeRequestReviews(
    params: PartnerCenterSellV1.ListSupportChangeRequestReviewsParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'changeRequestId'];
    const _validParams = ['productId', 'changeRequestId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
      'changeRequestId': _params.changeRequestId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listSupportChangeRequestReviews'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes/{changeRequestId}/reviews',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Update an already created change request.
   *
   * Update a change request that was created earlier.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.changeRequestId - The resource ID of the change request. This ID can be obtained by getting
   * the offering and finding the current change request on it.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>>}
   */
  public requestSupportChangeRequestReview(
    params: PartnerCenterSellV1.RequestSupportChangeRequestReviewParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'changeRequestId'];
    const _validParams = ['productId', 'changeRequestId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
      'changeRequestId': _params.changeRequestId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'requestSupportChangeRequestReview'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes/{changeRequestId}/reviews',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Merge the approved changeset to the published product.
   *
   * Merge the approved change request back to the published product to make the changes available publicly.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {string} params.changeRequestId - The resource ID of the change request. This ID can be obtained by getting
   * the offering and finding the current change request on it.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>>}
   */
  public mergeSupportChangeRequest(
    params: PartnerCenterSellV1.MergeSupportChangeRequestParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ProductDetails>> {
    const _params = { ...params };
    const _requiredParams = ['productId', 'changeRequestId'];
    const _validParams = ['productId', 'changeRequestId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
      'changeRequestId': _params.changeRequestId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'mergeSupportChangeRequest'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/changes/{changeRequestId}/merge',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Request approval of support information.
   *
   * If the support information for your product is not approved, you can use this method to request approval of your
   * product's support information again.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>>}
   */
  public requestSupportApproval(
    params: PartnerCenterSellV1.RequestSupportApprovalParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'requestSupportApproval'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/support/approvals',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * approval
   ************************/

  /**
   * Request approval to publish.
   *
   * After you complete the requirements for onboarding a product, you can request approval to publish to the IBM Cloud
   * catalog.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>>}
   */
  public requestProductApproval(
    params: PartnerCenterSellV1.RequestProductApprovalParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.Resource>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'requestProductApproval'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/approvals',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List approvals.
   *
   * By using the product ID, you can get the current state and history of all approvals. Approvals are required to
   * publish your product to the catalog.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.productId - The unique ID of the product. This ID can be obtained by calling the list
   * products method and also can be found in Partner Center.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListProductApprovalsResponse>>}
   */
  public listProductApprovals(
    params: PartnerCenterSellV1.ListProductApprovalsParams
  ): Promise<PartnerCenterSellV1.Response<PartnerCenterSellV1.ListProductApprovalsResponse>> {
    const _params = { ...params };
    const _requiredParams = ['productId'];
    const _validParams = ['productId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'productId': _params.productId,
    };

    const sdkHeaders = getSdkHeaders(
      PartnerCenterSellV1.DEFAULT_SERVICE_NAME,
      'v1',
      'listProductApprovals'
    );

    const parameters = {
      options: {
        url: '/products/{productId}/approvals',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
}

/*************************
 * interfaces
 ************************/

namespace PartnerCenterSellV1 {
  /** An operation response. */
  export interface Response<T = any> {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface Empty {}

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `listProducts` operation. */
  export interface ListProductsParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createProduct` operation. */
  export interface CreateProductParams {
    /** The name of the product that you are onboarding. This name is displayed to users when you publish your
     *  product in the catalog.
     */
    productName: string;
    /** The tax assessment for your product. */
    taxAssessment: CreateProductConstants.TaxAssessment | string;
    /** The type of the product that you want to onboard to IBM Cloud. */
    productType: CreateProductConstants.ProductType | string;
    /** The confirmation that your company is authorized to use all materials. */
    materialAgreement?: boolean;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createProduct` operation. */
  export namespace CreateProductConstants {
    /** The tax assessment for your product. */
    export enum TaxAssessment {
      SOFTWARE = 'SOFTWARE',
    }
    /** The type of the product that you want to onboard to IBM Cloud. */
    export enum ProductType {
      SOFTWARE = 'SOFTWARE',
      SOLUTION = 'SOLUTION',
      MODULE = 'MODULE',
    }
  }

  /** Parameters for the `getProduct` operation. */
  export interface GetProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateProduct` operation. */
  export interface UpdateProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The confirmation that your company is authorized to use all materials. */
    materialAgreement?: boolean;
    /** The name of the product that you are onboarding. This name is displayed to users when you publish your
     *  product in the catalog.
     */
    productName?: string;
    /** The tax assessment for your product. */
    taxAssessment?: UpdateProductConstants.TaxAssessment | string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateProduct` operation. */
  export namespace UpdateProductConstants {
    /** The tax assessment for your product. */
    export enum TaxAssessment {
      SOFTWARE = 'SOFTWARE',
    }
  }

  /** Parameters for the `deleteProduct` operation. */
  export interface DeleteProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `publishProduct` operation. */
  export interface PublishProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `suspendProduct` operation. */
  export interface SuspendProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The reason why you want to suspend your published product. */
    reason: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deprecateProduct` operation. */
  export interface DeprecateProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The reason why you want to deprecate your published product. */
    reason: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `restoreProduct` operation. */
  export interface RestoreProductParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The reason why you want to restore your deprecated product. */
    reason: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listBadges` operation. */
  export interface ListBadgesParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getBadge` operation. */
  export interface GetBadgeParams {
    /** The unique ID of the badge. This ID can be obtained by calling the list badges method. */
    badgeId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getCatalog` operation. */
  export interface GetCatalogParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateCatalog` operation. */
  export interface UpdateCatalogParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The ID of the private catalog where your products are created. */
    catalogId?: string;
    /** The description of the product. */
    description?: string;
    /** The URL for your company or product logo. */
    iconUrl?: string;
    /** The key search terms that are associated with your product. */
    keywords?: string[];
    /** The pricing model for your product. */
    pricingModel?: UpdateCatalogConstants.PricingModel | string;
    /** A list of values that are used to categorize products in the catalog. By using the Catalogs management CLI
     *  plug-in, run the `ibmcloud catalog offering category-options` CLI command to list all possible values.
     */
    category?: string;
    providerType?: UpdateCatalogConstants.ProviderType | string[];
    /** The name of the product. */
    label?: string;
    /** The name of the product. */
    name?: string;
    /** The name of your company. */
    provider?: string;
    /** The keywords and phrases that are associated with your product. */
    tags?: string[];
    /** The link to the warranted product documentation. */
    documentationUrl?: string;
    /** The attributes of the product that differentiate it in the market. */
    highlights?: HighlightSectionInput[];
    /** The description about the details of the product. You can use markdown syntax to provide this description. */
    longDescription?: string;
    /** The images or videos that show off the product. */
    media?: MediaSectionInput[];
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateCatalog` operation. */
  export namespace UpdateCatalogConstants {
    /** The pricing model for your product. */
    export enum PricingModel {
      FREE = 'free',
      BYOL = 'byol',
    }
    /** ProviderType */
    export enum ProviderType {
      IBM_COMMUNITY = 'ibm_community',
      IBM_THIRD_PARTY = 'ibm_third_party',
    }
  }

  /** Parameters for the `requestCatalogApproval` operation. */
  export interface RequestCatalogApprovalParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listPlans` operation. */
  export interface ListPlansParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createPlan` operation. */
  export interface CreatePlanParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The description of the pricing model. */
    description: string;
    /** The name of the pricing plan. */
    label: string;
    /** The type of the pricing plan. */
    type: CreatePlanConstants.Type | string;
    /** The URL to where your customers can purchase the license that is required to use your product. */
    url: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `createPlan` operation. */
  export namespace CreatePlanConstants {
    /** The type of the pricing plan. */
    export enum Type {
      BYOL = 'byol',
    }
  }

  /** Parameters for the `getPlan` operation. */
  export interface GetPlanParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the pricing plan. This ID can be obtained by listing pricing plans. */
    pricingPlanId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updatePlan` operation. */
  export interface UpdatePlanParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the pricing plan. This ID can be obtained by listing pricing plans. */
    pricingPlanId: string;
    /** The description of the pricing model. */
    description: string;
    /** The name of the pricing plan. */
    label: string;
    /** The type of the pricing plan. */
    type: UpdatePlanConstants.Type | string;
    /** The URL to where your customers can purchase the license that is required to use your product. */
    url: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updatePlan` operation. */
  export namespace UpdatePlanConstants {
    /** The type of the pricing plan. */
    export enum Type {
      BYOL = 'byol',
    }
  }

  /** Parameters for the `deletePlan` operation. */
  export interface DeletePlanParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the pricing plan. This ID can be obtained by listing pricing plans. */
    pricingPlanId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getSupport` operation. */
  export interface GetSupportParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateSupport` operation. */
  export interface UpdateSupportParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The direct contact for IBM Cloud Support leaders to communicate with the support leader of your product.
     *  This contact information is not displayed on the product detail page in the catalog.
     */
    escalationContacts?: EscalationContactsUpdate[];
    /** The locations where support is provided from. */
    locations?: string[];
    /** Provide details about the available options for getting support. The details that you provide are displayed
     *  on your product details page in the catalog.
     */
    supportDetails?: SupportDetails[];
    /** The details about your support escalation process. The details that you provide are displayed on your
     *  product details page in the catalog.
     */
    supportEscalation?: SupportEscalation;
    /** The provider type for support of your product. */
    supportType?: UpdateSupportConstants.SupportType | string;
    /** The support site URL where users can go to get help, answer their questions, or ask experts and the
     *  community for help.
     */
    url?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Constants for the `updateSupport` operation. */
  export namespace UpdateSupportConstants {
    /** The provider type for support of your product. */
    export enum SupportType {
      THIRD_PARTY = 'third-party',
      COMMUNITY = 'community',
    }
  }

  /** Parameters for the `listSupportChangeRequests` operation. */
  export interface ListSupportChangeRequestsParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createSupportChangeRequest` operation. */
  export interface CreateSupportChangeRequestParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** Provide details about how customers can get help when they are using your product. */
    change: Support;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getSupportChangeRequest` operation. */
  export interface GetSupportChangeRequestParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the change request. This ID can be obtained by getting the offering and finding the
     *  current change request on it.
     */
    changeRequestId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `updateSupportChangeRequest` operation. */
  export interface UpdateSupportChangeRequestParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the change request. This ID can be obtained by getting the offering and finding the
     *  current change request on it.
     */
    changeRequestId: string;
    /** Provide details about how customers can get help when they are using your product. */
    change: Support;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listSupportChangeRequestReviews` operation. */
  export interface ListSupportChangeRequestReviewsParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the change request. This ID can be obtained by getting the offering and finding the
     *  current change request on it.
     */
    changeRequestId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `requestSupportChangeRequestReview` operation. */
  export interface RequestSupportChangeRequestReviewParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the change request. This ID can be obtained by getting the offering and finding the
     *  current change request on it.
     */
    changeRequestId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `mergeSupportChangeRequest` operation. */
  export interface MergeSupportChangeRequestParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    /** The resource ID of the change request. This ID can be obtained by getting the offering and finding the
     *  current change request on it.
     */
    changeRequestId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `requestSupportApproval` operation. */
  export interface RequestSupportApprovalParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `requestProductApproval` operation. */
  export interface RequestProductApprovalParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listProductApprovals` operation. */
  export interface ListProductApprovalsParams {
    /** The unique ID of the product. This ID can be obtained by calling the list products method and also can be
     *  found in Partner Center.
     */
    productId: string;
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** CatalogListingDetails. */
  export interface CatalogListingDetails {
    /** The unique ID for the account in which the product is being onboarded. */
    accountId?: string;
    /** The ID of the private catalog where your products are created. */
    catalogId: string;
    /** The deprecation process of the product is in the pending state. */
    deprecatePending?: DeprecatePending;
    /** The description of the product. */
    description?: string;
    /** The link to the warranted product documentation. */
    documentationUrl?: string;
    /** The product can be edited. */
    editable?: boolean;
    /** The attributes of the product that differentiate it in the market. */
    highlights?: HighlightSection[];
    /** The URL for your company or product logo. */
    iconUrl?: string;
    /** The ID that uniquely identifies the product in Partner Center. This ID can be found on the Dashboard tab in
     *  Partner Center.
     */
    id: string;
    /** The key search terms that are associated with your product. */
    keywords?: string[];
    /** The name of the product. */
    label?: string;
    /** Translated strings for the name of the product. */
    label_i18n?: JsonObject;
    /** The description about the details of the product. You can use markdown syntax to provide this description. */
    longDescription?: string;
    /** Translated strings for describing the details of the product. You can use markdown syntax to provide this
     *  description.
     */
    long_description_i18n?: JsonObject;
    /** The images or videos that show off the product. */
    media?: MediaSection[];
    /** The name of the product. */
    name?: string;
    /** The product was created in Partner Center. */
    pcManaged?: boolean;
    /** The name of your company. */
    provider?: string;
    /** The product is published to an access list. An access list is a list of accounts that your product is
     *  potentially shared with.
     */
    publishedToAccessList?: boolean;
    /** The product is available to all IBMers. */
    publishedToIBM?: boolean;
    /** The product is published to the IBM Cloud catalog. */
    publishedToPublic?: boolean;
    /** Translated strings for the description of the product. */
    short_description_i18n?: JsonObject;
    /** The keywords and phrases that are associated with your product. */
    tags?: string[];
    /** The version details of a product. */
    versions?: CatalogListingVersion[];
  }

  /** The version details of a product. */
  export interface CatalogListingVersion {
    /** The deprecation process of the product is in the pending state. */
    deprecatePending?: DeprecatePending;
    /** The version ID of the product. This ID can be found by using the Catalog management API. */
    id: string;
    /** The content kind. */
    kindFormat?: string;
    /** The unique ID of kind. */
    kindId?: string;
    /** Target kinds. */
    kindTarget?: string;
    /** The version of the package. */
    packageVersion?: string;
    /** The state of the version of your product. */
    state?: string;
    /** The time when the state of the version changed. */
    stateChangeTime?: string;
    /** The validation status of the version of your product. */
    validatedState?: string;
    /** The version number of the current version. */
    version?: string;
    /** A dot notation value that uses the format `catalogID.versionID`. */
    versionLocator?: string;
    /** The list of allowlisted accounts that have access to the version of your product. */
    allowlistedAccounts?: string[];
  }

  /** A change request that was opened to change the support properties of a published product. */
  export interface ChangeRequest {
    /** A unique id that identifies the change request. */
    id?: string;
    /** The time when the change request was created in standard ISO 8601 format. */
    createdAt?: string;
    /** The user ID of the user who initiated this change request. */
    initiator?: string;
    /** The time when the change request was merged back to the published product in standard ISO 8601 format. */
    merged?: string;
    /** Provide details about how customers can get help when they are using your product. */
    change?: Support;
  }

  /** CloudBadge. */
  export interface CloudBadge {
    /** The ID of the badge. */
    id: string;
    /** The name of the badge. */
    label?: string;
    /** The description of the badge. */
    description?: string;
    learnMoreLinks?: CloudBadgeLearnMoreLinks;
    /** An url to get started with the validation against this certification. */
    getStartedLink?: string;
    /** Deprecated, will be removed. */
    tag?: string;
  }

  /** CloudBadgeLearnMoreLinks. */
  export interface CloudBadgeLearnMoreLinks {
    /** An url where first party (IBMer) vendors can learn more about this badge. */
    firstParty?: string;
    /** An url where third party (non-IBMer) vendors can learn more about this badge. */
    thirdParty?: string;
  }

  /** CreatePlanResponse. */
  export interface CreatePlanResponse {
    plans?: License[];
  }

  /** The deprecation process of the product is in the pending state. */
  export interface DeprecatePending {
    /** The time when the product was deprecated in standard ISO 8601 format. */
    deprecateDate?: string;
    /** The deprecation state of the product. */
    deprecateState?: string;
    /** The reason why the product is getting deprecated. */
    description?: string;
  }

  /** Error. */
  export interface Error {
    /** Describes the error. */
    message?: string;
    /** These details are used to help the support engineer troubleshoot any occurring issues. */
    extensions?: ErrorExtensions;
  }

  /** These details are used to help the support engineer troubleshoot any occurring issues. */
  export interface ErrorExtensions {
    /** The code that identifies the error. */
    code?: string;
    /** The programmatic name of the product. This is the unique ID of the product that is used within all IBM
     *  services and tools.
     */
    serviceName?: string;
    /** The occurring error. */
    exception?: JsonObject;
    /** The transaction ID. This ID can be used for identifying errors. */
    trid?: string;
    /** The opreation when the error occurred. */
    operationName?: string;
  }

  /** The direct contact for IBM Cloud Support leaders to communicate with the support leader of your product. This contact information is not displayed on the product detail page in the catalog. */
  export interface EscalationContactsUpdate {
    /** The email address of the support leader. */
    email?: string;
    /** The name of the support leader. */
    name?: string;
  }

  /** The attributes of the product that differentiate it in the market. */
  export interface HighlightSection {
    /** The description about the features of the product. */
    description?: string;
    /** The description about the features of the product in translation. */
    description_i18n?: JsonObject;
    /** The descriptive title for the feature. */
    title?: string;
    /** The descriptive title for the feature in translation. */
    title_i18n?: JsonObject;
  }

  /** The attributes of the product that differentiate it in the market. */
  export interface HighlightSectionInput {
    /** The description about the features of the product. */
    description?: string;
    /** The descriptive title for the feature. */
    title?: string;
  }

  /** HistoryItem. */
  export interface HistoryItem {
    /** The time when you requested approval. */
    at: string;
    /** The name of the user, who managed the approval request. */
    displayName?: string;
    /** The event that happened during the approval request. */
    event?: string;
    /** The message from IBM Cloud approvers about the state of the approval request. */
    reason?: string;
    /** The email address of the user. */
    username?: string;
  }

  /** The pricing model for your product. */
  export interface License {
    /** The description of the pricing model. */
    description: string;
    /** The ID of the pricing plan. This ID can be used for further pricing plan updates. */
    id: string;
    /** The name of the pricing plan. */
    label: string;
    /** The type of the pricing plan. */
    type: string;
    /** The URL to where your customers can purchase the license that is required to use your product. */
    url: string;
  }

  /** ListPlansResponse. */
  export interface ListPlansResponse {
    plans?: License[];
  }

  /** ListProductApprovalsResponse. */
  export interface ListProductApprovalsResponse {
    approvals?: Resource[];
  }

  /** ListProductsResponse. */
  export interface ListProductsResponse {
    errors?: Error[];
    products?: ProductDetails[];
  }

  /** ListSupportChangeRequestsResponse. */
  export interface ListSupportChangeRequestsResponse {
    changes?: ChangeRequest[];
  }

  /** MediaSection. */
  export interface MediaSection {
    /** Provide a brief explanation that indicates what the media illustrates. This caption is displayed in the
     *  catalog.
     */
    caption: string;
    /** The brief explanation for your images and videos in translation. */
    caption_i18n?: JsonObject;
    /** The reduced-size version of your images and videos. */
    thumbnail?: string;
    /** The type of the media. */
    type: string;
    /** The URL that links to the media that shows off the product. */
    url: string;
  }

  /** MediaSectionInput. */
  export interface MediaSectionInput {
    /** Provide a brief explanation that indicates what the media illustrates. This caption is displayed in the
     *  catalog.
     */
    caption: string;
    /** The reduced-size version of your images and videos. */
    thumbnail?: string;
    /** The type of the media. */
    type: string;
    /** The URL that links to the media that shows off the product. */
    url: string;
  }

  /** The details of the product. */
  export interface ProductDetails {
    /** The unique ID for the account in which the product is being onboarded. */
    accountId?: string;
    /** The time when the new product was created in standard ISO 8601 format. */
    createdAt?: string;
    /** The ID that uniquely identifies the product in Partner Center. This ID can be found on the Dashboard tab in
     *  Partner Center.
     */
    id?: string;
    /** The confirmation that your company is authorized to use all materials. */
    materialAgreement?: boolean;
    /** The type of the product that you want to onboard to IBM Cloud. */
    productType?: string;
    /** The name of the product that you are onboarding. This name is displayed to users when you publish your
     *  product in the catalog.
     */
    productName?: string;
    /** The time when the new product was published to the IBM Cloud catalog in standard ISO 8601 format. */
    publishedAt?: string;
    /** The tax assessment for your product. */
    taxAssessment?: string;
    /** The time when the product was updated in standard ISO 8601 format. */
    updatedAt?: string;
    changeRequests?: ChangeRequest[];
  }

  /** The details of the catalog listing approval request. */
  export interface Resource {
    /** Shows the details of the approval. */
    history?: HistoryItem[];
    /** The ID that uniquely identifies the product in Partner Center. This ID can be found on the Dashboard tab in
     *  Partner Center.
     */
    id: string;
    /** The events after requesting an approval. */
    nextEvents?: string[];
    /** The state of the approval. */
    state: State;
  }

  /** The state of the approval. */
  export interface State {
    /** The name of the approval state. */
    name: string;
  }

  /** Provide details about how customers can get help when they are using your product. */
  export interface Support {
    /** The locations where your support team is providing support from. */
    locations?: string[];
    /** Provide details about how and when customers can get in touch with your support team. */
    process?: string;
    /** Translated strings for the support process describing how and when customers can get in touch with your
     *  support team.
     */
    process_i18n?: JsonObject;
    /** Provide details for the available options for getting support. The details that you provide are displayed on
     *  your product details page in the catalog.
     */
    support_details?: SupportDetails[];
    /** The details about your support escalation process. The details that you provide are displayed on your
     *  product details page in the catalog.
     */
    support_escalation?: SupportEscalation;
    /** The provider type for support of your product. */
    support_type?: string;
    /** The support site URL where users can go to get help, answer their questions, or ask experts and the
     *  community for help.
     */
    url?: string;
  }

  /** Provide details about the available options for getting support. The details that you provide are displayed on your product details page in the catalog. */
  export interface SupportDetails {
    /** The details about the availability of your support service. At minimum, your support service must be
     *  available 8 hours a day, Monday through Friday.
     */
    availability?: SupportDetailsAvailability;
    /** Provide your support contact information. Don't include details with personal information, for example
     *  personal emails.
     */
    contact?: string;
    /** The minimum number of hours that it takes to update your customers about a support case. */
    response_wait_time?: SupportResponseTimes;
    /** Provide information about how your customers can get support. */
    type?: string;
  }

  /** The details about the availability of your support service. At minimum, your support service must be available 8 hours a day, Monday through Friday. */
  export interface SupportDetailsAvailability {
    /** Support is available at any time. */
    always_available?: boolean;
    /** The times when your support service is available for your customers. */
    times?: SupportDetailsAvailabilityTimes[];
    /** The timezone in which provided support is available. */
    timezone?: string;
  }

  /** The details about the availability of product support. At minimum, your support service must be available 8 hours a day, Monday through Friday. */
  export interface SupportDetailsAvailabilityTimes {
    /** The days when your support service is available throughout the week. The seven days of the week are defined
     *  as numbers from 1 to 7. If your support service is available on Mondays and Wednesdays, enter numbers 1 and 3.
     */
    day?: number;
    /** The time in `hh:mm` format when support ends each day when your support coverage is listed as available. */
    end_time?: string;
    /** The time in `hh:mm` format when support starts each day when your support coverage is listed as available. */
    start_time?: string;
  }

  /** The details about your support escalation process. The details that you provide are displayed on your product details page in the catalog. */
  export interface SupportEscalation {
    /** The direct contact for IBM Cloud Support leaders to communicate with the support leaders of your product.
     *  This contact information is not displayed on the product details page in the catalog.
     */
    contact?: string;
    /** The number of hours that your customers need to wait before escalating a case. */
    escalation_wait_time?: SupportEscalationTimes;
    /** The minimum number of hours that it takes to update your customers about a support case. */
    response_wait_time?: SupportResponseTimes;
  }

  /** The number of hours that your customers need to wait before escalating a case. */
  export interface SupportEscalationTimes {
    type?: string;
    /** The amount of hours. */
    value?: number;
  }

  /** The minimum number of hours that it takes to update your customers about a support case. */
  export interface SupportResponseTimes {
    type?: string;
    /** The amount of hours. */
    value?: number;
  }
}

export = PartnerCenterSellV1;
